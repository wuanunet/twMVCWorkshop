@model DateTime?
@{
    var id = Guid.NewGuid();

    var format = "yyyy-MM-dd hh:mm:ss";

    if (ViewData.ContainsKey("mode") && (int) ViewData["mode"] == 2)
    {
        format = "yyyy-MM-dd";
    }

    var value = "";
    
    if (Model.HasValue)
    {
        value = Model.Value.ToString(format);    
    }
    
    
}
<div id="@id" class="input-append date">
    @*@Html.TextBox("", Model, new { data_format="yyyy/MM/dd hh:mm:ss" })*@
    @Html.TextBox("", value, new { data_format = format })
    <span class="add-on">
        <i data-time-icon="icon-time" data-date-icon="icon-calendar"></i>
    </span>
</div>
<script src="~/Scripts/bootstrap-datetimepicker.js"></script>
<script type="text/javascript">
    $(function () {
        $('#@id').datetimepicker({
            language: 'tw'
        });
    });
</script>

@*<div id="datetimepicker_@(ViewData.TemplateInfo.HtmlFieldPrefix)" class="input-append date">
    <input type="text" id="@(ViewData.TemplateInfo.HtmlFieldPrefix)" name="@(ViewData.TemplateInfo.HtmlFieldPrefix)" data-format="yyyy/MM/dd hh:mm:ss" value="@(ViewData.TemplateInfo.FormattedModelValue)"></input>
    <span class="add-on">
        <i data-time-icon="icon-time" data-date-icon="icon-calendar"></i>
    </span>
</div>
<script src="~/Scripts/bootstrap-datetimepicker.js"></script>
<script type="text/javascript">
    $(function () {
        $('#datetimepicker_@(ViewData.TemplateInfo.HtmlFieldPrefix)').datetimepicker({
            language: 'tw'
        });
    });
</script>*@
